file_filtered <- file %>%
slice(-1, -n())
# Print the number of rows in the filtered file
message("File processed: ", file_path, " | Rows imported: ", nrow(file_filtered))
# Add additional columns
file_filtered_1 <- file_filtered %>%
mutate(
condition = condition,
group_id = group_number,
trial = trial
)
return(file_filtered_1)
}
# Directory containing your files
data_dir <- "~/Desktop/bachelor/onde_bachelor/experiment_folder/data"
# List all CSV files in the directory, excluding those with the "group" ratings
file_list <- list.files(data_dir, pattern = "*.csv", full.names = TRUE) %>%
keep(~ !str_detect(basename(.), "group"))
# Process all files and combine them into a single data frame
all_data_no_ratings <- file_list %>%
map_df(~ tryCatch(process_trial_file(.), error = function(e) {
message("Error processing file: ", .)
NULL # Skip file on error
}))
# Ensure the folder "data_combined_nr" exists
output_dir <- "~/Desktop/bachelor/onde_bachelor/data_processing/"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)  # Create the folder if it doesn't exist
}
# Save the combined data
write.csv(all_data_no_ratings, file = file.path(output_dir, "processed_data_no_ratings.csv"), row.names = FALSE)
# Define a function to process files in the "group" category
process_group_file <- function(file_path) {
# Read the file
file <- read.csv(file_path, header = TRUE)  # Assuming these files have headers
# Modify the "participant" column
file <- file %>%
mutate(participant = case_when(
participant == "Blue" ~ 1,
participant == "Black" ~ 2,
participant == "Pink" ~ 3,
TRUE ~ NA  # Handle unexpected values with NA
)) %>%
mutate(condition = as.character(condition)) %>% #for now, making the condition column of type character
mutate(condition = str_replace(condition, "Simultaneous", "simultaneous"))
return(file)
}
# Directory containing your files
data_dir <- "~/Desktop/bachelor/onde_bachelor/experiment_folder/data"
# List all "group" files
group_file_list <- list.files(data_dir, pattern = "^group.*\\.csv$", full.names = TRUE)
# Process all "group" files
processed_group_files <- group_file_list %>%
map_df(~ tryCatch(process_group_file(.), error = function(e) {
message("Error processing group file: ", .)
NULL  # Skip file on error
}))
# Save the combined data
write.csv(processed_group_files, file = file.path(output_dir, "processed_data_ratings.csv"), row.names = FALSE)
#temporarily setting wd to find combined files
#setwd("~/Documents/Cognitive_Science/Bachelor/Bachelor2025/data_processing/")
no_ratings_df <- read.csv("processed_data_no_ratings.csv")
ratings_df  <- read.csv("processed_data_ratings.csv")
#combining the no ratings df and the ratings df
#(- practice conditions (trial = 0) is dropped in combining df's bc ratings for practice is not stored - hence cannot be joined with corresponding trial)
combined_data <- ratings_df %>%
left_join(no_ratings_df, by = join_by(group_id, condition, trial, participant))
#checking if na's present
na_count <- sum(is.na(combined_data))
print(paste("Number of NA values in the dataset prior to removal:", na_count))
#dropping na's present
combined_data <- combined_data %>%
drop_na()
#checking if na's present
na_count <- sum(is.na(combined_data))
print(paste("Number of NA values in the dataset post removal:", na_count))
combined_data <- combined_data %>%
mutate(subgroup_present = ifelse(condition == "23-1"|condition == "1-23", 1,0)) %>%
mutate(is_a_subgroup_member = ifelse(subgroup_present == 1 & participant == "2"|
subgroup_present == 1 & participant == "3",
1,0))
# rearrange dataframe after tap_sec to get alternation between participants
new_iti_data <- combined_data %>%
group_by(trial, condition, group_id) %>%
arrange(tap_sec, .by_group = TRUE) %>%
ungroup()
new_iti_data <- new_iti_data %>%
group_by(trial) %>%
mutate(iti = tap_sec-lag(tap_sec))
View(new_iti_data)
data <- new_iti_data %>%
group_by(trial, condition, group_id) %>%
arrange(tap_sec, .by_group = TRUE) %>%
mutate(
# Assign a unique cycle ID that increments every three taps
tap_cycle = ceiling(row_number() / 3)
) %>%
group_by(group_id, condition, trial, tap_cycle) %>%  # Group by the dynamically assigned tap cycle
mutate(
new_iti = case_when(
# For 1-23 and 23-1: Transfer Participant 1's ITI as-is
condition %in% c("23-1", "1-23") & participant == 1 ~ iti,
# For 1-23 and 23-1: Sum ITIs for Participants 2 and 3 only on the last tap of the cycle
condition %in% c("23-1", "1-23") & participant %in% c(2, 3) & tap_cycle == max(tap_cycle) ~
sum(iti[participant %in% c(2, 3)], na.rm = TRUE),
# For 1-23 and 23-1: Set ITIs of Participants 2 and 3 to 0 outside the last tap of the cycle
condition %in% c("23-1", "1-23") & participant %in% c(2, 3) & tap_cycle != max(tap_cycle) ~ 0,
# For simultaneous: Sum ITIs of all three participants only on the last tap of the cycle
condition == "simultaneous" & tap_cycle == max(tap_cycle) ~ sum(iti, na.rm = TRUE),
# For simultaneous: Set ITIs of all participants to 0 outside the last tap of the cycle
condition == "simultaneous" & tap_cycle != max(tap_cycle) ~ 0,
# Retain original ITI for other conditions
TRUE ~ iti
)
) %>%
ungroup()
View(data)
data <- data %>%
group_by(group_id, condition, trial, tap_cycle) %>%
mutate(
new_iti = case_when(
# For conditions 1-23 and 23-1, remove the middle value in each cycle (second tap)
condition %in% c("23-1", "1-23") & tap_cycle %in% unique(tap_cycle) ~
ifelse(row_number() == 2, NA, new_iti),
# For simultaneous, remove the first two values in each cycle (first two taps)
condition == "simultaneous" & tap_cycle %in% unique(tap_cycle) ~
ifelse(row_number() <= 2, NA, new_iti),
# Keep new_iti unchanged for other conditions
TRUE ~ new_iti
)
) %>%
ungroup()
View(data)
data <- data %>%
group_by(trial, condition, group_id) %>%
arrange(tap_sec, .by_group = TRUE) %>%
ungroup()
data <- data %>%
group_by(group_id, condition, trial, participant) %>%
filter(new_iti >=0)
data <- data %>%
group_by(group_id, condition, trial) %>%
mutate(cv = sd(iti))  # Calculate cv as the sd of the ITI's
RQ1_overall <- lmerTest::lmer(cv ~ subgroup_present + (1 | group_id), data)
summary(RQ1_overall)
anova(RQ1_overall)
head(combined_data)
combined_data_RQ2 <- data %>%
filter(subgroup_present == 1)
RQ2 <- lmerTest::lmer(shared ~ is_a_subgroup_member + cv + (1 | group_id), combined_data_RQ2)
anova(RQ2) # converts model into type III anova - is there a difference between the means of each variable rather than is there a difference between each intercept
summary(RQ2)
R32 <- lmerTest::lmer(control ~ is_a_subgroup_member + cv + (1 | group_id), combined_data_RQ2)
R32 <- lmerTest::lmer(control ~ is_a_subgroup_member + cv + (1 | group_id), combined_data_RQ2)
summary(R32)
knitr::opts_chunk$set(echo = TRUE) #code + output is displayed
knitr::opts_knit$set(root.dir = "~/Desktop/bachelor/onde_bachelor/experiment_folder/data") # set working directory
# #read packages
pacman::p_load(tidyverse)
# Define a function to process a single file
process_trial_file <- function(file_path) {
# Check if the file is empty
if (file.info(file_path)$size == 0) {
message("Skipping empty file: ", file_path)
return(NULL) # Skip processing this file
}
# Extract the filename (without directory and extension)
file_name <- basename(file_path) %>% str_remove(".csv")
# Extract information from the filename
parts <- str_split(file_name, "_")[[1]]
group_number <- as.numeric(parts[2])
condition <- case_when(
parts[3] == "123" ~ "123",
parts[3] == "231" ~ "231",
parts[3] == "312" ~ "312",
parts[3] == "23-1" ~ "23-1",
parts[3] == "1-23" ~ "1-23",
parts[3] == "Simultaneous" ~ "simultaneous",
TRUE ~ "unknown"  # Add a default case if new conditions are encountered
)
trial <- as.numeric(parts[4])
# Read the file
file <- read.csv(file_path, header = FALSE)
# Add headers
colnames(file) <- c("tap_sec", "participant")
# Filter out the first and last rows
file_filtered <- file %>%
slice(-1, -n())
# Print the number of rows in the filtered file
message("File processed: ", file_path, " | Rows imported: ", nrow(file_filtered))
# Add additional columns
file_filtered_1 <- file_filtered %>%
mutate(
condition = condition,
group_id = group_number,
trial = trial
)
return(file_filtered_1)
}
# Directory containing your files
data_dir <- "~/Desktop/bachelor/onde_bachelor/experiment_folder/data"
# List all CSV files in the directory, excluding those with the "group" ratings
file_list <- list.files(data_dir, pattern = "*.csv", full.names = TRUE) %>%
keep(~ !str_detect(basename(.), "group"))
# Process all files and combine them into a single data frame
all_data_no_ratings <- file_list %>%
map_df(~ tryCatch(process_trial_file(.), error = function(e) {
message("Error processing file: ", .)
NULL # Skip file on error
}))
# Ensure the folder "data_combined_nr" exists
output_dir <- "~/Desktop/bachelor/onde_bachelor/data_processing/"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)  # Create the folder if it doesn't exist
}
# Save the combined data
write.csv(all_data_no_ratings, file = file.path(output_dir, "processed_data_no_ratings.csv"), row.names = FALSE)
# Define a function to process files in the "group" category
process_group_file <- function(file_path) {
# Read the file
file <- read.csv(file_path, header = TRUE)  # Assuming these files have headers
# Modify the "participant" column
file <- file %>%
mutate(participant = case_when(
participant == "Blue" ~ 1,
participant == "Black" ~ 2,
participant == "Pink" ~ 3,
TRUE ~ NA  # Handle unexpected values with NA
)) %>%
mutate(condition = as.character(condition)) %>% #for now, making the condition column of type character
mutate(condition = str_replace(condition, "Simultaneous", "simultaneous"))
return(file)
}
# Directory containing your files
data_dir <- "~/Desktop/bachelor/onde_bachelor/experiment_folder/data"
# List all "group" files
group_file_list <- list.files(data_dir, pattern = "^group.*\\.csv$", full.names = TRUE)
# Process all "group" files
processed_group_files <- group_file_list %>%
map_df(~ tryCatch(process_group_file(.), error = function(e) {
message("Error processing group file: ", .)
NULL  # Skip file on error
}))
# Save the combined data
write.csv(processed_group_files, file = file.path(output_dir, "processed_data_ratings.csv"), row.names = FALSE)
#temporarily setting wd to find combined files
#setwd("~/Documents/Cognitive_Science/Bachelor/Bachelor2025/data_processing/")
no_ratings_df <- read.csv("processed_data_no_ratings.csv")
ratings_df  <- read.csv("processed_data_ratings.csv")
#combining the no ratings df and the ratings df
#(- practice conditions (trial = 0) is dropped in combining df's bc ratings for practice is not stored - hence cannot be joined with corresponding trial)
combined_data <- ratings_df %>%
left_join(no_ratings_df, by = join_by(group_id, condition, trial, participant))
#checking if na's present
na_count <- sum(is.na(combined_data))
print(paste("Number of NA values in the dataset prior to removal:", na_count))
#dropping na's present
combined_data <- combined_data %>%
drop_na()
#checking if na's present
na_count <- sum(is.na(combined_data))
print(paste("Number of NA values in the dataset post removal:", na_count))
combined_data <- combined_data %>%
mutate(subgroup_present = ifelse(condition == "23-1"|condition == "1-23", 1,0)) %>%
mutate(is_a_subgroup_member = ifelse(subgroup_present == 1 & participant == "2"|
subgroup_present == 1 & participant == "3",
1,0))
#### Proper code according to discussion with Anna
# rearrange dataframe after tap_sec to get alternation between participants
combined_data <- combined_data %>%
group_by(trial, condition, group_id) %>%
arrange(tap_sec, .by_group = TRUE) %>%
ungroup()
combined_data <- combined_data %>%
group_by(group_id, condition, trial) %>%
mutate(iti = tap_sec-lag(tap_sec))
knitr::opts_chunk$set(echo = TRUE) #code + output is displayed
knitr::opts_knit$set(root.dir = "~/Desktop/bachelor/onde_bachelor/experiment_folder/data") # set working directory
# #read packages
pacman::p_load(tidyverse)
# Define a function to process a single file
process_trial_file <- function(file_path) {
# Check if the file is empty
if (file.info(file_path)$size == 0) {
message("Skipping empty file: ", file_path)
return(NULL) # Skip processing this file
}
# Extract the filename (without directory and extension)
file_name <- basename(file_path) %>% str_remove(".csv")
# Extract information from the filename
parts <- str_split(file_name, "_")[[1]]
group_number <- as.numeric(parts[2])
condition <- case_when(
parts[3] == "123" ~ "123",
parts[3] == "231" ~ "231",
parts[3] == "312" ~ "312",
parts[3] == "23-1" ~ "23-1",
parts[3] == "1-23" ~ "1-23",
parts[3] == "Simultaneous" ~ "simultaneous",
TRUE ~ "unknown"  # Add a default case if new conditions are encountered
)
trial <- as.numeric(parts[4])
# Read the file
file <- read.csv(file_path, header = FALSE)
# Add headers
colnames(file) <- c("tap_sec", "participant")
# Filter out the first and last rows
file_filtered <- file %>%
slice(-1, -n())
# Print the number of rows in the filtered file
message("File processed: ", file_path, " | Rows imported: ", nrow(file_filtered))
# Add additional columns
file_filtered_1 <- file_filtered %>%
mutate(
condition = condition,
group_id = group_number,
trial = trial
)
return(file_filtered_1)
}
# Directory containing your files
data_dir <- "~/Desktop/bachelor/onde_bachelor/experiment_folder/data"
# List all CSV files in the directory, excluding those with the "group" ratings
file_list <- list.files(data_dir, pattern = "*.csv", full.names = TRUE) %>%
keep(~ !str_detect(basename(.), "group"))
# Process all files and combine them into a single data frame
all_data_no_ratings <- file_list %>%
map_df(~ tryCatch(process_trial_file(.), error = function(e) {
message("Error processing file: ", .)
NULL # Skip file on error
}))
# Ensure the folder "data_combined_nr" exists
output_dir <- "~/Desktop/bachelor/onde_bachelor/data_processing/"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)  # Create the folder if it doesn't exist
}
# Save the combined data
write.csv(all_data_no_ratings, file = file.path(output_dir, "processed_data_no_ratings.csv"), row.names = FALSE)
# Define a function to process files in the "group" category
process_group_file <- function(file_path) {
# Read the file
file <- read.csv(file_path, header = TRUE)  # Assuming these files have headers
# Modify the "participant" column
file <- file %>%
mutate(participant = case_when(
participant == "Blue" ~ 1,
participant == "Black" ~ 2,
participant == "Pink" ~ 3,
TRUE ~ NA  # Handle unexpected values with NA
)) %>%
mutate(condition = as.character(condition)) %>% #for now, making the condition column of type character
mutate(condition = str_replace(condition, "Simultaneous", "simultaneous"))
return(file)
}
# Directory containing your files
data_dir <- "~/Desktop/bachelor/onde_bachelor/experiment_folder/data"
# List all "group" files
group_file_list <- list.files(data_dir, pattern = "^group.*\\.csv$", full.names = TRUE)
# Process all "group" files
processed_group_files <- group_file_list %>%
map_df(~ tryCatch(process_group_file(.), error = function(e) {
message("Error processing group file: ", .)
NULL  # Skip file on error
}))
# Save the combined data
write.csv(processed_group_files, file = file.path(output_dir, "processed_data_ratings.csv"), row.names = FALSE)
#temporarily setting wd to find combined files
#setwd("~/Documents/Cognitive_Science/Bachelor/Bachelor2025/data_processing/")
no_ratings_df <- read.csv("processed_data_no_ratings.csv")
ratings_df  <- read.csv("processed_data_ratings.csv")
#combining the no ratings df and the ratings df
#(- practice conditions (trial = 0) is dropped in combining df's bc ratings for practice is not stored - hence cannot be joined with corresponding trial)
combined_data <- ratings_df %>%
left_join(no_ratings_df, by = join_by(group_id, condition, trial, participant))
#checking if na's present
na_count <- sum(is.na(combined_data))
print(paste("Number of NA values in the dataset prior to removal:", na_count))
#dropping na's present
combined_data <- combined_data %>%
drop_na()
#checking if na's present
na_count <- sum(is.na(combined_data))
print(paste("Number of NA values in the dataset post removal:", na_count))
# adding subgroup present and is a subgroup meber columns
combined_data <- combined_data %>%
mutate(subgroup_present = ifelse(condition == "23-1"|condition == "1-23", 1,0)) %>%
mutate(is_a_subgroup_member = ifelse(subgroup_present == 1 & participant == "2"|
subgroup_present == 1 & participant == "3",
1,0))
#### Proper code according to discussion with Anna
# rearrange dataframe after tap_sec to get alternation between participants
combined_data <- combined_data %>%
group_by(trial, condition, group_id) %>%
arrange(tap_sec, .by_group = TRUE) %>%
ungroup()
combined_data <- combined_data %>%
group_by(group_id, condition, trial) %>%
mutate(iti = tap_sec-lag(tap_sec))
View(combined_data_RQ2)
View(combined_data)
combined_data <- combined_data %>%
group_by(group_id, condition, trial) %>%
mutate(iti = tap_sec-lag(tap_sec))
#calculate new_iti- based on summing the itis of group members to get the actual interval betwen tones
combined_data <- combined_data %>%
group_by(trial, condition, group_id) %>%
arrange(tap_sec, .by_group = TRUE) %>%
mutate(
# Assign a unique cycle ID that increments every three taps
tap_cycle = ceiling(row_number() / 3)
) %>%
group_by(group_id, condition, trial, tap_cycle) %>%  # Group by the dynamically assigned tap cycle
mutate(
new_iti = case_when(
# For 1-23 and 23-1: Transfer Participant 1's ITI as-is
condition %in% c("23-1", "1-23") & participant == 1 ~ iti,
# For 1-23 and 23-1: Sum ITIs for Participants 2 and 3 only on the last tap of the cycle
condition %in% c("23-1", "1-23") & participant %in% c(2, 3) & tap_cycle == max(tap_cycle) ~
sum(iti[participant %in% c(2, 3)], na.rm = TRUE),
# For 1-23 and 23-1: Set ITIs of Participants 2 and 3 to 0 outside the last tap of the cycle
condition %in% c("23-1", "1-23") & participant %in% c(2, 3) & tap_cycle != max(tap_cycle) ~ 0,
# For simultaneous: Sum ITIs of all three participants only on the last tap of the cycle
condition == "simultaneous" & tap_cycle == max(tap_cycle) ~ sum(iti, na.rm = TRUE),
# For simultaneous: Set ITIs of all participants to 0 outside the last tap of the cycle
condition == "simultaneous" & tap_cycle != max(tap_cycle) ~ 0,
# Retain original ITI for other conditions
TRUE ~ iti
)
) %>%
ungroup()
#remove the repeated values - so there is only one iti in new_iti for each tone
combined_data <- combined_data %>%
group_by(group_id, condition, trial, tap_cycle) %>%
mutate(
new_iti = case_when(
# For conditions 1-23 and 23-1, remove the middle value in each cycle (second tap)
condition %in% c("23-1", "1-23") & tap_cycle %in% unique(tap_cycle) ~
ifelse(row_number() == 2, NA, new_iti),
# For simultaneous, remove the first two values in each cycle (first two taps)
condition == "simultaneous" & tap_cycle %in% unique(tap_cycle) ~
ifelse(row_number() <= 2, NA, new_iti),
# Keep new_iti unchanged for other conditions
TRUE ~ new_iti
)
) %>%
ungroup()
# ordering the data
combined_data <- combined_data %>%
group_by(trial, condition, group_id) %>%
arrange(tap_sec, .by_group = TRUE) %>%
ungroup()
# removing unwanted rows - negative itis when switching trials
combined_data <- combined_data %>%
group_by(group_id, condition, trial, participant) %>%
filter(new_iti >=0)
#checking if na's present
na_count <- sum(is.na(combined_data))
print(paste("Number of NA values in the dataset", na_count))
# removing unwanted rows - negative itis when switching trials
combined_data <- combined_data %>%
group_by(group_id, condition, trial, participant) %>%
filter(new_iti >=0)
#checking if na's present
na_count <- sum(is.na(combined_data))
print(paste("Number of NA values in the dataset", na_count))
View(combined_data)
#dropping na's present
combined_data <- combined_data %>%
drop_na()
#checking if na's present
na_count <- sum(is.na(combined_data))
print(paste("Number of NA values in the dataset post removal:", na_count))
combined_data <- combined_data %>%
group_by(group_id, condition, trial) %>%
mutate(cv = sd(new_iti))  # Calculate cv as the sd of the ITI's
combined_data$group_id <- as.factor(combined_data$group_id)
combined_data$is_a_subgroup_member <- as.factor(combined_data$is_a_subgroup_member)
combined_data$condition <- as.factor(combined_data$condition)
combined_data$subgr2oup_present <- as.factor(combined_data$subgroup_present)
View(combined_data)
# Save the combined data
write.csv(combined_data, file = file.path("new_iti.csv"), row.names = FALSE)
write.csv(filtered_even_rows, file = file.path(output_dir, "asynchronies.csv"), row.names = FALSE)
RQ1_overall <- lmerTest::lmer(cv ~ subgroup_present + (1 | group_id), combined_data)
summary(RQ1_overall)
anova(RQ1_overall)
head(combined_data)
combined_data_RQ2 <- combined_data %>%
filter(subgroup_present == 1)
RQ2 <- lmerTest::lmer(shared ~ is_a_subgroup_member + cv + (1 | group_id), combined_data_RQ2)
R32 <- lmerTest::lmer(control ~ is_a_subgroup_member + cv + (1 | group_id), combined_data_RQ2)
summary(R32)
anova(RQ2) # converts model into type III anova - is there a difference between the means of each variable rather than is there a difference between each intercept
summary(RQ2)
git add .
setwd("~/Cognitive_Science/Bachelor/Bachelor2025/experiment_folder")
source("r_scripts/main.r)")
source("r_scripts/main.r")
hist(iois)
ggplot(iois, aes(x=iois))+
geom_histogram()
df_ioi <- as_tibble(iois)
ggplot(df_ioi, aes(x=iois))+
geom_histogram()
ggplot(df_ioi, aes(x=iois))+
geom_density(alpha=.2, fill="#FF6666")
ggplot(df_iois, aes(x=iois))+
geom_histogram()+
geom_density(alpha=.2, fill="#FF6666")
ggplot(df_ioi, aes(x=iois))+
geom_histogram()+
geom_density(alpha=.2, fill="#FF6666")
